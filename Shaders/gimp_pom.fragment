varying vec2 tex;
varying vec3 vpos;
varying vec3 normal;
varying vec3 tangent;
varying vec3 binormal;

uniform sampler2D sNormal;
uniform sampler2D sDiffuse;
uniform sampler2D sGloss;

uniform vec3 lightDir;
uniform bool specular;
uniform vec3 ambient_color;
uniform vec3 diffuse_color;
uniform vec3 specular_color;
uniform float specular_exp;
uniform vec2 planes;
uniform float depth_factor;

void ray_intersect(sampler2D reliefMap, inout vec4 p, inout vec3 v)
{
   const int search_steps = 20;

   v /= float(search_steps);

   vec4 pp = p;
   for(int i = 0; i < search_steps - 1; ++i)
   {
      p.w = texture2D(reliefMap, p.xy).w;
      if(p.w > p.z)
      {
         pp = p;
         p.xyz += v;
      }
   }

   float f = (pp.w - pp.z) / (p.z - pp.z - p.w + pp.w);
   p = mix(pp, p, f);
}






void main()
{

   vec3 V = normalize(vpos);
   float a = dot(normal, -V);
   vec3 v = vec3(dot(V, tangent), dot(V, binormal), a);
   vec3 scale = vec3(1.0, 1.0, depth_factor);
   v *= scale.z / (scale * v.z);
   vec4 p = vec4(tex, vec2(0.0, 1.0));

   ray_intersect(sNormal, p, v);

   vec2 uv = p.xy;
   vec3 N = texture2D(sNormal, uv).xyz * 2.0 - 1.0;
   vec3 diffuse = texture2D(sDiffuse, uv).rgb;

   N.z = sqrt(1.0 - dot(N.xy, N.xy));
   N = normalize(N.x * tangent + N.y * binormal + N.z * normal);
   float NdotL = clamp(dot(N, lightDir), 0.0, 1.0);

   vec3 color = diffuse * diffuse_color * NdotL;

   if(specular)
   {
      vec3 gloss = texture2D(sGloss, uv).rgb;
      vec3 R = reflect(V, N);
      float RdotL = clamp(dot(R, lightDir), 0.0, 1.0);
      color += gloss * specular_color * pow(RdotL, specular_exp);
   }

   gl_FragColor.rgb = ambient_color * diffuse + color;
}

