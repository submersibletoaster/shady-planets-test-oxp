// Diso is 6155Km
//uniform float fOuterRadius;		// The outer (atmosphere) radius
uniform float fOuterRadius;
//uniform float fOuterRadius2;	// fOuterRadius^2
//float fOuterRadius2 = 44289025.0;
//uniform float fInnerRadius;		// The inner (planetary) radius
uniform float fInnerRadius;
//uniform float fInnerRadius2;	// fInnerRadius^2
//float fInnerRadius2 = 43632630.0;


uniform mat4 _Object2World;
uniform vec3 ooposition;
uniform vec4 Scattering;

// No vNormal, because normal is always 0,0,1 in tangent space.
varying vec3			vEyeVector;
varying vec2			vTexCoords;
varying vec3			vLight1Vector;
varying vec3			vCoords;

varying vec3			CameraPos;

varying vec4			vColor;
varying vec3			vVertexWorld;
varying vec3			vSurfaceWorld;
varying vec3			vVertexObj;
varying vec3			eyeVector;

varying vec3			vLight1Pos;
varying vec3			vNormal;

vec3 Air = vec3( 0.125, 0.40, 1.0 ) * 8.0;
//vec3 Air = vec3(8.0);

//vec3 Scattering = vec3( 0.1,0.5,0.8) ;

#ifndef OO_REDUCED_COMPLEXITY
#define OO_REDUCED_COMPLEXITY = 0
#endif


bool IOsphereIntersect(vec3 vPos,vec3 vRay,float Radius,inout vec3 vIntersect,inout float Dist) {
	float Radius2= Radius*Radius;	
	float tca = dot(vPos,normalize(vRay));
	if (tca < 0.0 ) {
		return false;
	}
	//float d2 = length(ooposition - vPos ) - pow(tca,2.0);
	float d2 = length(vPos) - pow(tca,2.0);
	if (d2 > Radius2) { 
		return false;
	}
	float thc = sqrt( Radius2 - d2 );
	float t0 = tca - thc;
	float t1 = tca + thc;
	Dist = thc*2.0;
	vIntersect = vPos + vRay*t0;
	return true;	
}

void main(void)
{
	vCoords = gl_Vertex.xyz;
	
	
	// Build tangent basis.
	vec3 normal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 binormal = cross(normal, gl_NormalMatrix * vec3(0, 1, 0));
	vec3 tangent = -cross(normal, binormal);
	
	mat3 TBN = mat3(tangent, binormal, normal);
	
	eyeVector = -vec3(gl_ModelViewMatrix * gl_Vertex);
	vEyeVector = eyeVector * TBN;

	vec3 light1Vector = gl_LightSource[1].position.xyz + eyeVector;
	vLight1Vector = light1Vector * TBN;
	
	//
	vVertexWorld = ooposition + normal * fOuterRadius;
	vVertexObj   = normal;
	vSurfaceWorld = ooposition + normal * fInnerRadius;
	CameraPos = ooposition + normal * eyeVector * fOuterRadius;
	
	
	vNormal = gl_Normal;
	vLight1Pos = (ooposition - gl_LightSource[1].position.xyz) * vNormal ;
	vTexCoords = gl_MultiTexCoord0.st;
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
//----------------------------------------------------------------------------
/* #if OO_REDUCED_COMPLEXITY


		vColor.rgb = vec3(0.0);
	vec3 vLightCol = gl_LightSource[1].diffuse.rgb;
	vec3 Hit;
	float AtmosDist = 0.0;
	float SurfaceDist = 0.0;
	
	float fObjAtmosDepth =   1.0 - ( ( fOuterRadius-fInnerRadius ) / fOuterRadius );
	float fObjAtmosMaxDist = sqrt( 1.0 - pow( ( fOuterRadius-fInnerRadius ) / fOuterRadius, 2.0 )  ) ;
	fObjAtmosMaxDist /= 3.14;
	bool SurfaceHit=false;
	bool AtmosHit=false;

	if ( 
		IOsphereIntersect(vVertexObj,eyeVector, 1.0 ,Hit,AtmosDist) == true) {
		AtmosHit=true;
		//AtmosDist= length(vVertexObj - Hit);		
	}
	if (IOsphereIntersect(vVertexObj,eyeVector, fObjAtmosDepth ,Hit,SurfaceDist) == true) {
		SurfaceHit = true;
		//SurfaceDist = length(vVertexObj - Hit);
	}
	float EyeDist;
	if ( SurfaceHit == true ) {
		EyeDist = ( AtmosDist - SurfaceDist );
		//EyeDist = distance(vVertexObj,Hit);
	} else {
		EyeDist = AtmosDist; 
	}
	//float fScatter = (AtmosDist - SurfaceDist ) / fObjAtmosMaxDist;
	float fScatter = EyeDist / fObjAtmosMaxDist;
	float fOpacity;
	if ( SurfaceHit == true ) {
		fOpacity = fScatter;
	} else {
		fOpacity = pow( EyeDist / fObjAtmosMaxDist , 5.0 );
	}
	//vColor.rgb = Air*fScatter*vLightCol;

	vec3 Light1Obj = (gl_LightSource[1].position.xyz -ooposition ) ;
	float Occlude = dot(normalize(Light1Obj),vVertexObj);
	float Directional = dot(normalize(vLight1Vector),normalize(vEyeVector));
	Directional = 1.0 - smoothstep( -1, -0.8 , Directional );
	Directional *= Directional;
	Directional *=2.0;
	Directional += 1.15;

	vec3 vRayleigh = 2.0 * Scattering * fScatter  *  smoothstep(-0.25,.25, Occlude);
	vec3 ivRayleigh = 2.0 * Scattering * fScatter  *  smoothstep(.25,-0.25, Occlude);
	vColor.rgb += vRayleigh;
	vLightCol -= ivRayleigh;
	vColor.rgb += (vLightCol * fScatter * Directional );


	//vColor.a = fScatter * Directional;
	vColor.a = fOpacity * Directional;
	vColor.a *= 1.0 * smoothstep(-0.35,-0.05, Occlude);
#endif
*/

}

